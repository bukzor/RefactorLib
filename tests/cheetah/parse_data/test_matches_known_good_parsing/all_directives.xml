<cheetah><compiler-settings><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>compiler</Py><Py>-</Py><Py>settings</Py></UnbracedExpression>
</SimpleIndentingDirective></Directive><PlainText>useLegacyImportMode = True
</PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><UnbracedExpression><Py>compiler</Py><Py>-</Py><Py>settings</Py></UnbracedExpression>
</Directive></compiler-settings><Directive><DirectiveStart>#</DirectiveStart>extends<WhiteSpace> </WhiteSpace>testing.templates.extends_test_template
</Directive><Directive><DirectiveStart>#</DirectiveStart>implements<WhiteSpace> </WhiteSpace><Identifier>respond</Identifier>
</Directive><PlainText>
</PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>import</Py> <Py>sys</Py></UnbracedExpression>
</SimpleExprDirective></Directive><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>from</Py> <Py>tests</Py><Py>.</Py><Py>SyntaxAndOutput_test</Py> <Py>import</Py> <Py>dummydecorator</Py></UnbracedExpression>
</SimpleExprDirective></Directive><PlainText>

</PlainText><Directive><DirectiveStart>#</DirectiveStart>attr<WhiteSpace> </WhiteSpace><Identifier>attribute</Identifier><WhiteSpace> </WhiteSpace>=<WhiteSpace> </WhiteSpace><UnbracedExpression><Py>"bar"</Py></UnbracedExpression>
</Directive><PlainText>

</PlainText><Directive><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>@</Py><Py>dummydecorator</Py></UnbracedExpression>
</Directive><def><Directive><DirectiveStart>#</DirectiveStart>def<WhiteSpace> </WhiteSpace><Identifier>foo_call_func</Identifier><DefArgspec><BracedExpression><Py>(</Py><Py>arg</Py><Py>)</Py></BracedExpression></DefArgspec>
</Directive><PlainText>    </PlainText><Placeholder>$<Identifier>arg</Identifier></Placeholder><PlainText>
</PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><UnbracedExpression><Py>def</Py></UnbracedExpression>
</Directive></def><PlainText>

</PlainText><def><Directive><DirectiveStart>#</DirectiveStart>def<WhiteSpace> </WhiteSpace><Identifier>returning_function</Identifier><DefArgspec><BracedExpression><Py>(</Py><Py>)</Py></BracedExpression></DefArgspec>
</Directive><PlainText>    </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>return</Py> <Py>5</Py></UnbracedExpression>
</SimpleExprDirective></Directive><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><UnbracedExpression><Py>def</Py></UnbracedExpression>
</Directive></def><PlainText>

</PlainText><def><Directive><DirectiveStart>#</DirectiveStart>def<WhiteSpace> </WhiteSpace><Identifier>try_raise_finally_func</Identifier><DefArgspec><BracedExpression><Py>(</Py><Py>)</Py></BracedExpression></DefArgspec>
</Directive><PlainText>    </PlainText><try><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>try</Py></UnbracedExpression>
</SimpleIndentingDirective></Directive><PlainText>        </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>raise</Py> <Py>AssertionError</Py><BracedExpression><Py>(</Py><Py>"foo"</Py><Py>)</Py></BracedExpression></UnbracedExpression>
</SimpleExprDirective></Directive><PlainText>    </PlainText><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>except</Py> <Py>AssertionError</Py></UnbracedExpression>
</SimpleIndentingDirective></Directive><PlainText>        Caught AssertionError
    </PlainText><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>except</Py> <Py>ValueError</Py></UnbracedExpression>
</SimpleIndentingDirective></Directive><PlainText>        </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>pass</Py></UnbracedExpression>
</SimpleExprDirective></Directive><PlainText>    </PlainText><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>finally</Py></UnbracedExpression>
</SimpleIndentingDirective></Directive><PlainText>        Finally
    </PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><UnbracedExpression><Py>try</Py></UnbracedExpression>
</Directive></try><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><UnbracedExpression><Py>def</Py></UnbracedExpression>
</Directive></def><PlainText>

</PlainText><def><Directive><DirectiveStart>#</DirectiveStart>def<WhiteSpace> </WhiteSpace><Identifier>spacer</Identifier><DefArgspec><BracedExpression><Py>(</Py><Py>)</Py></BracedExpression></DefArgspec>
</Directive><PlainText>   </PlainText><Directive><DirectiveStart>#</DirectiveStart>super<DefArgspec><BracedExpression><Py>(</Py><Py>)</Py></BracedExpression></DefArgspec>
</Directive><PlainText>   after
</PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><UnbracedExpression><Py>def</Py></UnbracedExpression>
</Directive></def><PlainText>

</PlainText><def><Directive><DirectiveStart>#</DirectiveStart>def<WhiteSpace> </WhiteSpace><Identifier>gen</Identifier><DefArgspec><BracedExpression><Py>(</Py><Py>)</Py></BracedExpression></DefArgspec>
</Directive><PlainText>    </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>yield</Py> <Py>1</Py></UnbracedExpression>
</SimpleExprDirective></Directive><PlainText>    </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>yield</Py> <Py>2</Py></UnbracedExpression>
</SimpleExprDirective></Directive><PlainText>    </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>yield</Py> <Py>3</Py></UnbracedExpression>
</SimpleExprDirective></Directive><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><UnbracedExpression><Py>def</Py></UnbracedExpression>
</Directive></def><PlainText>

</PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart>py<UnbracedExpression> <Py>foo</Py> <Py>=</Py> <BracedExpression><Py>{</Py><Py>"a"</Py><Py>:</Py> <Py>1</Py><Py>}</Py></BracedExpression></UnbracedExpression>
</SimpleExprDirective></Directive><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>del</Py> <Py>foo</Py><BracedExpression><Py>[</Py><Py>'a'</Py><Py>]</Py></BracedExpression></UnbracedExpression>
</SimpleExprDirective></Directive><Placeholder>$<Identifier>foo</Identifier></Placeholder><PlainText>


</PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>assert</Py> <Py>True</Py></UnbracedExpression>
</SimpleExprDirective></Directive><PlainText>

</PlainText><Placeholder>$<Identifier>returning_function</Identifier><BracedExpression><Py>(</Py><Py>)</Py></BracedExpression></Placeholder><PlainText>
</PlainText><Placeholder>$<Identifier>spacer</Identifier><BracedExpression><Py>(</Py><Py>)</Py></BracedExpression></Placeholder><PlainText>

</PlainText><if><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>if</Py> <Py>15</Py></UnbracedExpression>
</SimpleIndentingDirective></Directive><PlainText>   15!
</PlainText><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>elif</Py> <Py>16</Py></UnbracedExpression>
</SimpleIndentingDirective></Directive><PlainText>   16!
</PlainText><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>else</Py></UnbracedExpression>
</SimpleIndentingDirective></Directive><PlainText>   not 15 or 16
</PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><UnbracedExpression><Py>if</Py></UnbracedExpression>
</Directive></if><PlainText>
</PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart>py<UnbracedExpression> <Py>arr</Py> <Py>=</Py> <BracedExpression><Py>[</Py><Py>1</Py><Py>,</Py> <Py>2</Py><Py>,</Py> <Py>3</Py><Py>]</Py></BracedExpression></UnbracedExpression>
</SimpleExprDirective></Directive><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart>py<UnbracedExpression> <Py>arr</Py><Py>.</Py><Py>append</Py><BracedExpression><Py>(</Py><Py>4</Py><Py>)</Py></BracedExpression></UnbracedExpression>
</SimpleExprDirective></Directive><Placeholder>$<Identifier>arr</Identifier></Placeholder><PlainText>

</PlainText><block><Directive><DirectiveStart>#</DirectiveStart>block<WhiteSpace> </WhiteSpace><Identifier>infinite_loop_meybs</Identifier>
</Directive><PlainText>    </PlainText><while><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>while</Py> <Py>True</Py></UnbracedExpression>
</SimpleIndentingDirective></Directive><PlainText>        infinite loop?
        </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>break</Py> </UnbracedExpression><Comment><CommentStart>##</CommentStart> nope lol</Comment>
</SimpleExprDirective></Directive><PlainText>    </PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><UnbracedExpression><Py>while</Py></UnbracedExpression>
</Directive></while><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><UnbracedExpression><Py>block</Py></UnbracedExpression>
</Directive></block><PlainText>
</PlainText><for><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>for</Py> <Py>i</Py> <Py>in</Py> <CheetahVar>$<Identifier>gen</Identifier><BracedExpression><Py>(</Py><Py>)</Py></BracedExpression></CheetahVar></UnbracedExpression>
</SimpleIndentingDirective></Directive><PlainText>    </PlainText><if><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>if</Py> <CheetahVar>$<Identifier>i</Identifier></CheetahVar> <Py>==</Py> <Py>2</Py></UnbracedExpression>
</SimpleIndentingDirective></Directive><PlainText>        </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><UnbracedExpression><Py>continue</Py></UnbracedExpression>
</SimpleExprDirective></Directive><PlainText>    </PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><UnbracedExpression><Py>if</Py></UnbracedExpression>
</Directive></if><PlainText>    </PlainText><Placeholder>$<Identifier>i</Identifier></Placeholder><Directive><DirectiveStart>#</DirectiveStart>slurp
</Directive><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><UnbracedExpression><Py>for</Py></UnbracedExpression>
</Directive></for></cheetah>