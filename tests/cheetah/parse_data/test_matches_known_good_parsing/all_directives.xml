<cheetah><compiler-settings><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>compiler</Py><Py>-</Py><Py>settings</Py></ExpressionParts></Expression>
</SimpleIndentingDirective></Directive><PlainText>useDottedNotation = True
</PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>compiler</Py><Py>-</Py><Py>settings</Py></ExpressionParts></Expression>
</Directive></compiler-settings><Directive><DirectiveStart>#</DirectiveStart>extends<WhiteSpace> </WhiteSpace>testing.templates.extends_test_template
</Directive><Directive><DirectiveStart>#</DirectiveStart>implements<WhiteSpace> </WhiteSpace><Identifier>respond</Identifier>
</Directive><PlainText>
</PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>import</Py><WhiteSpace> </WhiteSpace><Py>sys</Py></ExpressionParts></Expression>
</SimpleExprDirective></Directive><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>from</Py><WhiteSpace> </WhiteSpace><Py>tests</Py><Py>.</Py><Py>SyntaxAndOutput_test</Py><WhiteSpace> </WhiteSpace><Py>import</Py><WhiteSpace> </WhiteSpace><Py>dummydecorator</Py></ExpressionParts></Expression>
</SimpleExprDirective></Directive><PlainText>

</PlainText><Directive><DirectiveStart>#</DirectiveStart>attr<WhiteSpace> </WhiteSpace><Identifier>attribute</Identifier><WhiteSpace> </WhiteSpace>=<WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>"bar"</Py></ExpressionParts></Expression>
</Directive><PlainText>

</PlainText><Directive><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>@</Py><Py>dummydecorator</Py></ExpressionParts></Expression>
</Directive><def><Directive><DirectiveStart>#</DirectiveStart>def<WhiteSpace> </WhiteSpace><Identifier>foo_call_func</Identifier><DefArgList>(<Identifier>arg</Identifier></DefArgList>)
</Directive><PlainText>    </PlainText><Placeholder><CheetahVarStart>$</CheetahVarStart><CheetahVarNameChunks><DottedName><Identifier>arg</Identifier></DottedName></CheetahVarNameChunks></Placeholder><PlainText>
</PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>def</Py></ExpressionParts></Expression>
</Directive></def><PlainText>

</PlainText><def><Directive><DirectiveStart>#</DirectiveStart>def<WhiteSpace> </WhiteSpace><Identifier>returning_function</Identifier><DefArgList>(</DefArgList>)
</Directive><PlainText>    </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>return</Py><WhiteSpace> </WhiteSpace><Py>5</Py></ExpressionParts></Expression>
</SimpleExprDirective></Directive><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>def</Py></ExpressionParts></Expression>
</Directive></def><PlainText>

</PlainText><def><Directive><DirectiveStart>#</DirectiveStart>def<WhiteSpace> </WhiteSpace><Identifier>try_raise_finally_func</Identifier><DefArgList>(</DefArgList>)
</Directive><PlainText>    </PlainText><try><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>try</Py></ExpressionParts></Expression>
</SimpleIndentingDirective></Directive><PlainText>        </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>raise</Py><WhiteSpace> </WhiteSpace><Py>AssertionError</Py><CallArgString>(<Py>"foo"</Py>)</CallArgString></ExpressionParts></Expression>
</SimpleExprDirective></Directive><PlainText>    </PlainText><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>except</Py><WhiteSpace> </WhiteSpace><Py>AssertionError</Py></ExpressionParts></Expression>
</SimpleIndentingDirective></Directive><PlainText>        Caught AssertionError
    </PlainText><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>except</Py><WhiteSpace> </WhiteSpace><Py>ValueError</Py></ExpressionParts></Expression>
</SimpleIndentingDirective></Directive><PlainText>        </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>pass</Py></ExpressionParts></Expression>
</SimpleExprDirective></Directive><PlainText>    </PlainText><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>finally</Py></ExpressionParts></Expression>
</SimpleIndentingDirective></Directive><PlainText>        Finally
    </PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>try</Py></ExpressionParts></Expression>
</Directive></try><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>def</Py></ExpressionParts></Expression>
</Directive></def><PlainText>

</PlainText><def><Directive><DirectiveStart>#</DirectiveStart>def<WhiteSpace> </WhiteSpace><Identifier>spacer</Identifier><DefArgList>(</DefArgList>)
</Directive><PlainText>   </PlainText><Directive><DirectiveStart>#</DirectiveStart>super<DefArgList>(</DefArgList>)
</Directive><PlainText>   after
</PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>def</Py></ExpressionParts></Expression>
</Directive></def><PlainText>

</PlainText><def><Directive><DirectiveStart>#</DirectiveStart>def<WhiteSpace> </WhiteSpace><Identifier>gen</Identifier><DefArgList>(</DefArgList>)
</Directive><PlainText>    </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>yield</Py><WhiteSpace> </WhiteSpace><Py>1</Py></ExpressionParts></Expression>
</SimpleExprDirective></Directive><PlainText>    </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>yield</Py><WhiteSpace> </WhiteSpace><Py>2</Py></ExpressionParts></Expression>
</SimpleExprDirective></Directive><PlainText>    </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>yield</Py><WhiteSpace> </WhiteSpace><Py>3</Py></ExpressionParts></Expression>
</SimpleExprDirective></Directive><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>def</Py></ExpressionParts></Expression>
</Directive></def><PlainText>

</PlainText><call><Directive><DirectiveStart>#</DirectiveStart>call<WhiteSpace> </WhiteSpace><CheetahVar><CheetahVarStart>$</CheetahVarStart><CheetahVarBody><CheetahVarNameChunks><DottedName><Identifier>foo_call_func</Identifier></DottedName></CheetahVarNameChunks></CheetahVarBody></CheetahVar>
</Directive><PlainText>Hello world
</PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>call</Py></ExpressionParts></Expression>
</Directive></call><PlainText>

</PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart>set<Expression><ExpressionParts><WhiteSpace> </WhiteSpace><Py>foo</Py><WhiteSpace> </WhiteSpace><Py>=</Py><WhiteSpace> </WhiteSpace><CurlyBrace>{<Py>"a"</Py><Py>:</Py><WhiteSpace> </WhiteSpace><Py>1</Py>}</CurlyBrace></ExpressionParts></Expression>
</SimpleExprDirective></Directive><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>del</Py><WhiteSpace> </WhiteSpace><Py>foo</Py><SquareBracket>[<Py>'a'</Py>]</SquareBracket></ExpressionParts></Expression>
</SimpleExprDirective></Directive><Placeholder><CheetahVarStart>$</CheetahVarStart><CheetahVarNameChunks><DottedName><Identifier>foo</Identifier></DottedName></CheetahVarNameChunks></Placeholder><PlainText>


</PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>assert</Py><WhiteSpace> </WhiteSpace><Py>True</Py></ExpressionParts></Expression>
</SimpleExprDirective></Directive><PlainText>

</PlainText><Placeholder><CheetahVarStart>$</CheetahVarStart><CheetahVarNameChunks><DottedName><Identifier>returning_function</Identifier></DottedName><CallArgString>()</CallArgString></CheetahVarNameChunks></Placeholder><PlainText>
</PlainText><Placeholder><CheetahVarStart>$</CheetahVarStart><CheetahVarNameChunks><DottedName><Identifier>spacer</Identifier></DottedName><CallArgString>()</CallArgString></CheetahVarNameChunks></Placeholder><PlainText>

</PlainText><if><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>if</Py><WhiteSpace> </WhiteSpace><Py>15</Py></ExpressionParts></Expression>
</SimpleIndentingDirective></Directive><PlainText>   15!
</PlainText><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>elif</Py><WhiteSpace> </WhiteSpace><Py>16</Py></ExpressionParts></Expression>
</SimpleIndentingDirective></Directive><PlainText>   16!
</PlainText><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>else</Py></ExpressionParts></Expression>
</SimpleIndentingDirective></Directive><PlainText>   not 15 or 16
</PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>if</Py></ExpressionParts></Expression>
</Directive></if><PlainText>
</PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart>set<Expression><ExpressionParts><WhiteSpace> </WhiteSpace><Py>arr</Py><WhiteSpace> </WhiteSpace><Py>=</Py><WhiteSpace> </WhiteSpace><SquareBracket>[<Py>1</Py><Py>,</Py><WhiteSpace> </WhiteSpace><Py>2</Py><Py>,</Py><WhiteSpace> </WhiteSpace><Py>3</Py>]</SquareBracket></ExpressionParts></Expression>
</SimpleExprDirective></Directive><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart>silent<Expression><ExpressionParts><WhiteSpace> </WhiteSpace><Py>arr</Py><Py>.</Py><Py>append</Py><CallArgString>(<Py>4</Py>)</CallArgString></ExpressionParts></Expression>
</SimpleExprDirective></Directive><Placeholder><CheetahVarStart>$</CheetahVarStart><CheetahVarNameChunks><DottedName><Identifier>arr</Identifier></DottedName></CheetahVarNameChunks></Placeholder><PlainText>

</PlainText><block><Directive><DirectiveStart>#</DirectiveStart>block<WhiteSpace> </WhiteSpace><Identifier>infinite_loop_meybs</Identifier>
</Directive><PlainText>    </PlainText><while><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>while</Py><WhiteSpace> </WhiteSpace><Py>True</Py></ExpressionParts></Expression>
</SimpleIndentingDirective></Directive><PlainText>        infinite loop?
        </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>break</Py><WhiteSpace> </WhiteSpace></ExpressionParts></Expression><Comment><CommentStart>##</CommentStart> nope lol</Comment>
</SimpleExprDirective></Directive><PlainText>    </PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>while</Py></ExpressionParts></Expression>
</Directive></while><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>block</Py></ExpressionParts></Expression>
</Directive></block><PlainText>
</PlainText><for><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>for</Py><WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>i</Py><WhiteSpace> </WhiteSpace></ExpressionParts></Expression><Py>in</Py><WhiteSpace> </WhiteSpace><CheetahVar><CheetahVarStart>$</CheetahVarStart><CheetahVarBody><CheetahVarNameChunks><DottedName><Identifier>gen</Identifier></DottedName><CallArgString>()</CallArgString></CheetahVarNameChunks></CheetahVarBody></CheetahVar></ExpressionParts></Expression>
</SimpleIndentingDirective></Directive><PlainText>    </PlainText><if><Directive><SimpleIndentingDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>if</Py><WhiteSpace> </WhiteSpace><CheetahVar><CheetahVarStart>$</CheetahVarStart><CheetahVarBody><CheetahVarNameChunks><DottedName><Identifier>i</Identifier></DottedName></CheetahVarNameChunks></CheetahVarBody></CheetahVar><WhiteSpace> </WhiteSpace><Py>==</Py><WhiteSpace> </WhiteSpace><Py>2</Py></ExpressionParts></Expression>
</SimpleIndentingDirective></Directive><PlainText>        </PlainText><Directive><SimpleExprDirective><DirectiveStart>#</DirectiveStart><Expression><ExpressionParts><Py>continue</Py></ExpressionParts></Expression>
</SimpleExprDirective></Directive><PlainText>    </PlainText><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>if</Py></ExpressionParts></Expression>
</Directive></if><PlainText>    </PlainText><Placeholder><CheetahVarStart>$</CheetahVarStart><CheetahVarNameChunks><DottedName><Identifier>i</Identifier></DottedName></CheetahVarNameChunks></Placeholder><Directive><DirectiveStart>#</DirectiveStart>slurp
</Directive><Directive><DirectiveStart>#</DirectiveStart>end<WhiteSpace> </WhiteSpace><Expression><ExpressionParts><Py>for</Py></ExpressionParts></Expression>
</Directive></for></cheetah>